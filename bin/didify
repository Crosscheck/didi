#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory to didify, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory to didify."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

files = {
  "Capfile" => unindent(<<-FILE),
    require 'railsless-deploy'          # gem install railsless-deploy
    require 'capistrano/ext/multistage' # gem install capistrano-ext
    require 'didi/recipes/didi.rb'      # gem install capistrano-didi 
    load 'config/deploy'
  FILE

  "config/deploy.rb" => 'set :default_stage, "staging"
set :stages, %w(staging production)
set :application, "set your application name here"
set :repository,  "set your repository location here"
set :drupal_path, "drupal" # change this to your drupal folder
',
  "config/deploy/staging.rb" => 'set :user, "set your shell user here"
server "set your server hostname here", :app, :web, :db, :primary => true

set :deploy_to, "the path on the remote server"
set :branch, "master"

set :db_type, "mysql"
set :db_name, "set database name"
set :db_username, "set database user name"
set :db_password, "set database password"

set :profile, "minimal"
set :site, "apache vhost here"
set :sitemail, "drupal site email address"
set :adminpass, "drupal admin pass"
set :sitesubdir, "default"

set :baseline, "drupal feature to activate after fresh install"
'}

base = ARGV.shift
files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir_p(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] didified!"

unless File.exists?("#{base}/drupal")
  puts ""
  puts 'WARNING: drupal folder not found! install drupal in folder "drupal" or change the :drupal_path variable.'
  puts 'WARNING: for example: drush dl drupal --drupal-project-rename="drupal"'
end

puts ""
puts 'After editing your config files just run: "didi deploy:cold" to set things up.'
puts 'After that you can do incremental updates with: "didi deploy"'
puts 'Or "didi deploy:rebuild" to setup from scratch'

